#include <boost/interprocess/managed_shared_memory.hpp>
#include <boost/interprocess/allocators/allocator.hpp>
#include <boost/interprocess/containers/string.hpp>

#include <boost/multi_index_container.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/multi_index/ordered_index.hpp>
#include <boost/multi_index_container.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/multi_index/ordered_index.hpp>
#include <iostream>
#include <string>
#include <boost/foreach.hpp>
#include <boost/typeof/typeof.hpp>
#include <boost/multi_index/composite_key.hpp>
#include <boost/multi_index/global_fun.hpp>
#include <boost/multi_index/mem_fun.hpp>
#include <boost/multi_index/global_fun.hpp>
#include <boost/multi_index/key_extractors.hpp>
#include <boost/optional.hpp>
#include <boost/tuple/tuple.hpp>
#include <vector>



using namespace boost::interprocess;

typedef managed_shared_memory::allocator<char>::type              char_allocator;
typedef basic_string<char, std::char_traits<char>, char_allocator> shm_string;

struct quote
{
public:
	int market;
	int kind;
	shm_string seccode;
	shm_string secname;
	float price;
	float zf;

	quote(int market_, int kind_, const char* seccode_, const char_allocator& a, const char* secname_, const char_allocator& b, float price_, float zf_):
		market(market_),kind(kind_), seccode(seccode_, a), secname(secname_, b), price(price_), zf(zf_)
	{}
};


typedef boost::multi_index::composite_key<quote, 
	BOOST_MULTI_INDEX_MEMBER(quote, int, market),
	BOOST_MULTI_INDEX_MEMBER(quote, shm_string, seccode)
>comp_key_search;
typedef boost::multi_index::composite_key_compare<
	std::greater<int>,
	std::greater<shm_string>
>comp_key_compare_search;


typedef boost::multi_index::composite_key<quote, 
	BOOST_MULTI_INDEX_MEMBER(quote, float, price),
	BOOST_MULTI_INDEX_MEMBER(quote, int, market),
	BOOST_MULTI_INDEX_MEMBER(quote, shm_string, seccode)
>comp_key_sortbyprice;
typedef boost::multi_index::composite_key_compare<
	std::greater<float>,
	std::greater<int>,
	std::greater<shm_string>
>comp_key_compare_sortbyprice;



typedef boost::multi_index::multi_index_container<
	quote,
	boost::multi_index::indexed_by<
		boost::multi_index::ordered_non_unique<comp_key_search, comp_key_compare_search>,
		boost::multi_index::ordered_non_unique<comp_key_sortbyprice, comp_key_compare_sortbyprice>
	>,
	managed_shared_memory::allocator<quote>::type
>quote_mic;



struct modify_quote
{
	float price;
	float zf;

	modify_quote(float price_, float zf_):
		price(price_), zf(zf_)
	{
	}

	void operator() (quote& q)
	{
		q.price = price;
		q.zf = zf;
	}
};


int main()
{
	 struct shm_remove
   {
      shm_remove() { shared_memory_object::remove("MySharedMemory"); }
      //~shm_remove(){ shared_memory_object::remove("MySharedMemory"); }
   } remover;

	 managed_shared_memory segment(create_only,"MySharedMemory", 65536);

	quote_mic *quotes = segment.find_or_construct<quote_mic>
      ("My MultiIndex Container")            //Container's name in shared memory
      ( quote_mic::ctor_args_list(),
      //, segment.get_allocator<quote>());  //Ctor parameters
	  quote_mic::allocator_type(segment.get_segment_manager()));

	char_allocator ca1(segment.get_allocator<char>());
	//char_allocator ca2(segment.get_allocator<char>());

	quotes->insert(quote(1, 1, "600003", ca1, "中国软件", ca1, 13.05f, 0.65f));
	quotes->insert(quote(1, 1, "600000", ca1, "浦发银行", ca1, 4.6f, 0.3f));
	quotes->insert(quote(0, 1, "000001", ca1, "深发展A", ca1, 12.00f, 0.7f));
	quotes->insert(quote(1, 1, "600002", ca1, "中软万维",ca1,  45.05f, 0.9f));
	quotes->insert(quote(0, 2, "300001", ca1, "创业板", ca1, 45.05f, 0.9f));

	quote_mic::nth_index<0>::type& idx_search = quotes->get<0>();
	quote_mic::nth_index<1>::type& idx_sortbyprice = quotes->get<1>();
	



	shm_string seccode("600000", ca1);

	BOOST_AUTO(pos, idx_search.find(boost::tuples::make_tuple(1, seccode)));
	idx_search.modify(pos, modify_quote(60.0f, 0.10f));



	return 0;
}
